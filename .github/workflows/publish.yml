name: Publish .NET nuget and create release

on:
  push:
    branches: [ "main" ]

jobs:

  before_publish:
    runs-on: ubuntu-latest
    outputs:
      pr-labels: ${{ steps.pr-labels.outputs.result }}
    steps:
    
    # This is getting all the labels sets on the PR
    - name: Get PR labels
      id: pr-labels
      uses: shioyang/check-pr-labels-on-push-action@v1.0.9
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        labels: '["publish"]'
    
  publish:
    runs-on: windows-latest
    if: needs.before_publish.outputs.pr-labels == 'true'
    needs: before_publish
    outputs:
      majorverionpath: ${{ steps.gitversion.outputs.MajorMinorPatch }}
      versionsha: ${{ steps.gitversion.outputs.VersionSourceSha }}
      sha: ${{ steps.gitversion.outputs.Sha }}

    steps:
    # Checkout sources. Depth=0 is for using GitVersion
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.x

      # Install and Setup GitVersion
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0
      with:
        versionSpec: '5.x'
    - name: Use GitVersion
      # Step id is used as reference for the output values
      id: gitversion 
      uses: gittools/actions/gitversion/execute@v0

      # Restore, build and test the project
    - name: Restore dependencies
      run: dotnet restore ./Lego.Infrared/Lego.Infrared.csproj
    - name: Build
      run: dotnet build ./Lego.Infrared/Lego.Infrared.csproj --no-restore
    - name: Test
      run: dotnet test ./Lego.Infrared/Lego.Infrared.csproj --no-build --verbosity normal  

    # Create a nuget Release      
    - name: Pack the NuGet package
      run: dotnet pack ./Lego.Infrared --configuration Release --output ./artifacts

    # debug for version printing
    - name: debug
      run: |
        echo ${{ steps.gitversion.outputs.MajorMinorPatch }}
        echo ${{ steps.gitversion.outputs.VersionSourceSha }}
        echo ${{ steps.gitversion.outputs.Sha }}

    
    # Install and Setup nanoFramework
    - uses: nanoframework/nanobuild@v1

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.1
      with:
        msbuild-architecture: x64
    
    - name: Install NuGet
      uses: nuget/setup-nuget@v1

    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}

    - name: Build
      id: build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: msbuild ${{env.SOLUTION_FILE_PATH}} /verbosity:normal /p:Configuration=Release /nologo

    - name: Pack the NuGet package
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget pack nanoFramework.Lego.Infrared.nuspec -PackagesDirectory ./artifacts -Version ${{ steps.gitversion.outputs.MajorMinorPatch }} -Symbols -SymbolPackageFormat snupkg -properties commit="${{ github.sha }}" -Verbosity normal

    # Publish all NuGet packages to NuGet.org
    # Use --skip-duplicate to prevent errors if a package with the same version already exists.
    # If you retry a failed workflow, already published packages will be skipped without error.
    - name: Publish .NET separate tools to NuGet
      run: dotnet nuget push ./artifacts/Lego.Infrared.${{ steps.gitversion.outputs.MajorMinorPatch }}.nupkg --api-key "${{ secrets.NUGET_TOOLS }}" --source https://api.nuget.org/v3/index.json --skip-duplicate
    - name: Publish .NET nanoFramework separate tools to NuGet
      run: dotnet nuget push ./artifacts/Lego.Infrared.nanoFramework.${{ steps.gitversion.outputs.MajorMinorPatch }}.nupkg --api-key "${{ secrets.NUGET_TOOLS }}" --source https://api.nuget.org/v3/index.json --skip-duplicate    

    # Create the CHANGELOG for this release
    # We'll compile it from last the version
    # to the current commit
    - name: Build Changelog
      id: github_release
      uses: mikepenz/release-changelog-builder-action@v1
      with:
        configuration: "./changelog-config.json"
        fromTag: ${{ steps.gitversion.outputs.MajorMinorPatch }}
        toTag: ${{ steps.gitversion.outputs.Sha }}
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Create GitHub release and CHANGELOG for Chocolatey and releases
    # NOTE: this is where we prepend "v" before the version in the tag/release
    - name: Create release
      uses: ncipollo/release-action@v1
      with:
        # no artifacts: ""
        body: ${{steps.github_release.outputs.changelog}}
        tag: "v${{ steps.gitversion.outputs.MajorMinorPatch }}"
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: "**/artifacts/*.nupkg"